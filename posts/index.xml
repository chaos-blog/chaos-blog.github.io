<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Chaos</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Chaos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>aoimysql配合mysql使用时的query缓存坑</title>
      <link>/posts/23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/23/</guid>
      <description>背景 近期开发sanic框架下的系统使用到了aiomysql三方库，异步执行sql提高系统工作效率 在手动向数据库插入数据后，使用aiomysql进行select时并不能查询到刚刚插入的数据，只能重启web服务 问题定位 最终定位问题为数据库操作仅针对非select进行了commit，造成select一直使用的是缓存 解决 一种方式是在所有的query语句之后都对上一次查询进行commit async with self.pool_db.acquire() as conn: # some query await conn.commit() 另一种方式是在执行sql之前将连接设置自动提交模式 async with self.pool_db.acquire() as conn: await conn.autocommit(True) 引用 (StackOverflow)[https://stackoverflow.com/questions/21974169/how-to-disable-query-cache-with-mysql-connector] </description>
      <content>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;近期开发sanic框架下的系统使用到了aiomysql三方库，异步执行sql提高系统工作效率&lt;/li&gt;
&lt;li&gt;在手动向数据库插入数据后，使用aiomysql进行select时并不能查询到刚刚插入的数据，只能重启web服务&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;问题定位&#34;&gt;问题定位&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;最终定位问题为数据库操作仅针对非select进行了commit，造成select一直使用的是缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解决&#34;&gt;解决&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;一种方式是在所有的query语句之后都对上一次查询进行commit&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pool_db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;acquire() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; conn:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# some query&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commit()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;另一种方式是在执行sql之前将连接设置自动提交模式&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pool_db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;acquire() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; conn:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;autocommit(&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;引用&#34;&gt;引用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;(StackOverflow)[https://stackoverflow.com/questions/21974169/how-to-disable-query-cache-with-mysql-connector]&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Debian使用kvm&#43;qemu&#43;cockpit搭建带有webui的虚拟机管理系统</title>
      <link>/posts/19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/19/</guid>
      <description>背景 在自己的nas上安装了纯debian系统，向拥有媲美pve的虚拟机管理流程但同时又不想重装一遍系统，故而经过一番搜索，发现目前主流的linux系虚拟机管理基本都是kvm+qemu。但这同时带来一个新的问题，我目前使用的是非gui版本的系统，同时由于mobaxterm的卡顿只能忍痛割爱其X-server功能转为termius，因此我并不能使用传统的vir-manager对虚拟机进行创建、管理等等。在搜索后发现同样由redhat出品的cockpitwebui管理端，借助websocket等技术，完美实现了对物理机的闭环管理以及虚拟机的管理。
软件介绍 kvm qemu cockpit 操作步骤 得益于kvm等等一干软件的开发团队以及巨大用户量，上述三个软件的安装非常简单，yum/apt/...等主流发行版的包管理器均内置了其完整的安装包；这里以debian为例
安装kvm+qemu Step-1：检查设备是都支持虚拟化技术 执行 当输出大于0则支持 egrep -c &amp;#39;(vmx|svm)&amp;#39; /proc/cpuinfo 执行kvm-ok 当输出如下则支持内核级虚拟化，若找不到命令则安装apt install cpu-checker INFO: /dev/kvm exists KVM acceleration can be used Step-2：安装KVM+qemu 执行下列命令 apt install qemu qemu-kvm libvirt-daemon libvirt-clients bridge-utils virt-manager 软件概述 **qemu：**允许进行硬件级虚拟化 qemu-kvm：kvm主程序，现已经更名为qemu-system-x86 **libvritd-daemon：**虚拟化守护程序 **bridge-utils：**虚拟网桥支持 **virt-manager：**基于x-server的虚拟机gui管理（本过程中非必须，但是最好装） Step-3：修改qemu运行权限，避免后期的虚拟机权限问题 使用你喜欢的编辑器编辑/etc/libvirt/qemu.conf 取消下列字段的注释 # Some examples of valid values are: # # user = &amp;#34;qemu&amp;#34; # A user named &amp;#34;qemu&amp;#34; # user = &amp;#34;+0&amp;#34; # Super user (uid=0) # user = &amp;#34;100&amp;#34; # A user named &amp;#34;100&amp;#34; or a user with uid=100 # user = &amp;#34;root&amp;#34; # The group for QEMU processes run by the system instance.</description>
      <content>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;  在自己的nas上安装了纯debian系统，向拥有媲美pve的虚拟机管理流程但同时又不想重装一遍系统，故而经过一番搜索，发现目前主流的linux系虚拟机管理基本都是kvm+qemu。但这同时带来一个新的问题，我目前使用的是非gui版本的系统，同时由于mobaxterm的卡顿只能忍痛割爱其X-server功能转为termius，因此我并不能使用传统的vir-manager对虚拟机进行创建、管理等等。在搜索后发现同样由redhat出品的&lt;code&gt;cockpit&lt;/code&gt;webui管理端，借助websocket等技术，完美实现了对物理机的闭环管理以及虚拟机的管理。&lt;/p&gt;
&lt;h2 id=&#34;软件介绍&#34;&gt;软件介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;kvm&lt;/li&gt;
&lt;li&gt;qemu&lt;/li&gt;
&lt;li&gt;cockpit&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;操作步骤&#34;&gt;操作步骤&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;得益于kvm等等一干软件的开发团队以及巨大用户量，上述三个软件的安装非常简单，&lt;code&gt;yum/apt/...&lt;/code&gt;等主流发行版的包管理器均内置了其完整的安装包；这里以debian为例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;安装kvmqemu&#34;&gt;安装kvm+qemu&lt;/h3&gt;
&lt;h4 id=&#34;step-1检查设备是都支持虚拟化技术&#34;&gt;Step-1：检查设备是都支持虚拟化技术&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;执行
&lt;ul&gt;
&lt;li&gt;当输出大于&lt;strong&gt;0&lt;/strong&gt;则支持&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  egrep -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(vmx|svm)&amp;#39;&lt;/span&gt; /proc/cpuinfo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;kvm-ok&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;当输出如下则支持内核级虚拟化，若找不到命令则安装&lt;code&gt;apt install cpu-checker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  INFO: /dev/kvm exists
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  KVM acceleration can be used
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;step-2安装kvmqemu&#34;&gt;Step-2：安装KVM+qemu&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;执行下列命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt install qemu qemu-kvm libvirt-daemon libvirt-clients bridge-utils virt-manager
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;软件概述
&lt;ul&gt;
&lt;li&gt;**qemu：**允许进行硬件级虚拟化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;qemu-kvm：&lt;strong&gt;kvm主程序，现已经更名为&lt;/strong&gt;qemu-system-x86&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;**libvritd-daemon：**虚拟化守护程序&lt;/li&gt;
&lt;li&gt;**bridge-utils：**虚拟网桥支持&lt;/li&gt;
&lt;li&gt;**virt-manager：**基于x-server的虚拟机gui管理（本过程中非必须，但是最好装）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;step-3修改qemu运行权限避免后期的虚拟机权限问题&#34;&gt;Step-3：修改qemu运行权限，避免后期的虚拟机权限问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;使用你喜欢的编辑器编辑&lt;code&gt;/etc/libvirt/qemu.conf &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;取消下列字段的注释&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Some examples of valid values are:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#       user = &amp;#34;qemu&amp;#34;   # A user named &amp;#34;qemu&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#       user = &amp;#34;+0&amp;#34;     # Super user (uid=0)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#       user = &amp;#34;100&amp;#34;    # A user named &amp;#34;100&amp;#34; or a user with uid=100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The group for QEMU processes run by the system instance. It can be&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# specified in a similar way to user.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;重启虚拟化服务&lt;code&gt;systemctl restart libvirtd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;step-4创建虚拟网桥方便后面创建的虚拟机直通路由而非走宿主机的nat&#34;&gt;Step-4：创建虚拟网桥，方便后面创建的虚拟机直通路由，而非走宿主机的NAT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;查看系统内网络&lt;code&gt;ip a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;确保没有&lt;code&gt;br0&lt;/code&gt;，以及记录当前的物理网卡（拿到真的路由分配地址的那个）是哪个，这里假定&lt;code&gt;enp2s0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用你喜欢的编辑器编辑&lt;code&gt;/etc/network/interfaces&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加下列字段&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The kvm bridge&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;auto br0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iface br0 inet dhcp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bridge_ports enp2s0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bridge_stp off
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bridge_fd &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;重启网络服务，&lt;!-- raw HTML omitted --&gt;这里会导致ssh断链、ip地址重新获取等意外事件，不要惊慌&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;step-5安装cockpit&#34;&gt;Step-5：安装cockpit&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;执行&lt;code&gt;apt install cockpit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为了让cockpit支持虚拟机管理，需要安装插件&lt;code&gt;apt install cockpit-machines&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动cockpit并开启开机自启&lt;code&gt;systemctl start cockpit &amp;amp;&amp;amp; systemctl enable cockpit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;step-6访问cockpit&#34;&gt;Step-6：访问cockpit&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cockpit默认监听&lt;code&gt;https://&amp;lt;host-ip&amp;gt;:9090&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用系统内任意账户登录&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;step-7享受现代科技&#34;&gt;Step-7：享受现代科技&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cockpit提供了非常多可视化的linux设备管理，并且易于使用&lt;/li&gt;
&lt;li&gt;后面如果有机会或者有难踩的坑的话或许会新开一篇单独对cockpit的虚拟机管理进行介绍&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Linux下xargs的基本用法</title>
      <link>/posts/22/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/22/</guid>
      <description>背景需求 遇到一个需要使用scp/rsync向远端传送当前文件夹下前n个文件的需求，若要一个一个的手输也不是不行，但总感觉有一些蠢
解决方案 xargs功能强大 xargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。 xargs 可以将管道或标准输入（stdin）数据转换成命令行参数，也能够从文件的输出中读取数据。 xargs 也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。 xargs 是一个强有力的命令，它能够捕获一个命令的输出，然后传递给另外一个命令。 详解 首先是要拿到该文件夹下的前n个文件 ls | head -100
利用rsync向远端传输文件 rsync -avzP &amp;lt;file_names&amp;gt; user@remote
使用xargs省去手动输入文件列表 ls | head -100 |xargs -i rsync -avzP {} user@remote
注意事项 args 默认的命令是 echo，这意味着通过管道传递给 xargs 的输入将会包含换行和空白，不过通过 xargs 的处理，换行和空白将被空格取代。 xargs 一般是和管道一起使用。 </description>
      <content>&lt;h2 id=&#34;背景需求&#34;&gt;背景需求&lt;/h2&gt;
&lt;p&gt;遇到一个需要使用scp/rsync向远端传送当前文件夹下前n个文件的需求，若要一个一个的手输也不是不行，但总感觉有一些蠢&lt;/p&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;xargs功能强大&lt;/li&gt;
&lt;li&gt;xargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。&lt;/li&gt;
&lt;li&gt;xargs 可以将管道或标准输入（stdin）数据转换成命令行参数，也能够从文件的输出中读取数据。&lt;/li&gt;
&lt;li&gt;xargs 也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。&lt;/li&gt;
&lt;li&gt;xargs 是一个强有力的命令，它能够捕获一个命令的输出，然后传递给另外一个命令。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;详解&#34;&gt;详解&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先是要拿到该文件夹下的前n个文件
&lt;code&gt;ls | head -100&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用rsync向远端传输文件
&lt;code&gt;rsync -avzP &amp;lt;file_names&amp;gt; user@remote&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用xargs省去手动输入文件列表
&lt;code&gt;ls | head -100 |xargs -i rsync -avzP {} user@remote&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;args 默认的命令是 echo，这意味着通过管道传递给 xargs 的输入将会包含换行和空白，不过通过 xargs 的处理，换行和空白将被空格取代。&lt;/li&gt;
&lt;li&gt;xargs 一般是和管道一起使用。&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>model.zero_grad() VS. optimzer.zero_grad()</title>
      <link>/posts/12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/12/</guid>
      <description>引言 在模型训练时，每个Batch反向传播完成后我们需要手动清除计算图上本次迭代的所有梯度 在阅读不同的代码时，总能看到不同的清空代码： model.zero_grad() optimizer.zero_grad() 正文 上述两种梯度清空的方式均有效，区别在于起作用的范围不同 model.zero_grad() 此时mdoel包含的所有参数上的梯度均被清空 optimizer.zero_grad() 此时该优化器中负责更新的模型参数上的梯度被清空，即不一定是全部的梯度被清空 若模型训练过程中只有一个优化器，即优化器构造时使用 optimizer = optim.Optimiers(model.parameters(), lr=args.lr) 此时上述两种梯度清空方式完全等价 总结 两种不同的梯度清零方式在多数场景下基本等价，其区别在于作用范围不同 对于多任务训练、多优化器的训练中，需要根据具体训练策略的不同对参数梯度进行不同作用范围的清空 </description>
      <content>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在模型训练时，每个Batch反向传播完成后我们需要手动清除计算图上本次迭代的所有梯度&lt;/li&gt;
&lt;li&gt;在阅读不同的代码时，总能看到不同的清空代码：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;model.zero_grad()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optimizer.zero_grad()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;上述两种梯度清空的方式均有效，区别在于起作用的范围不同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model.zero_grad()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;此时&lt;code&gt;mdoel&lt;/code&gt;包含的所有参数上的梯度均被清空&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optimizer.zero_grad()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;此时该优化器中负责更新的模型参数上的梯度被清空，即不一定是全部的梯度被清空&lt;/li&gt;
&lt;li&gt;若模型训练过程中只有一个优化器，即优化器构造时使用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;   optimizer = optim.Optimiers(model.parameters(), lr=args.lr)
&lt;/code&gt;&lt;/pre&gt;此时上述两种梯度清空方式完全等价&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;两种不同的梯度清零方式在多数场景下基本等价，其区别在于作用范围不同&lt;/li&gt;
&lt;li&gt;对于多任务训练、多优化器的训练中，需要根据具体训练策略的不同对参数梯度进行不同作用范围的清空&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>python中的print()函数深度使用</title>
      <link>/posts/6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/6/</guid>
      <description>背景 今天读代码的过程中发现了一种很有意思的print()写法 每一个程序员对每一种语言最熟悉的不过于各种“hello world”，这也不可避免的造成了我们对最熟悉的print()语句最为“陌生” 主题 对于python中print()函数的参数深度使用方法 语法 print(*values, [sep=&amp;quot;&amp;quot;, end=&amp;quot;&amp;quot;, file=&amp;quot;&amp;quot;, flush=&amp;quot;&amp;quot;]) 参数 *values 必需 要输出的内容，可以是任何类型对象 同时输出多个对象时，需要用,隔开 sep 可选 同时输出多个对象时的分隔符 默认空格 end 可选 输出最后一个对象之后的结尾符 默认是一个\n，即换行 file 可选 要打印输出到的“设备” 默认为输出到当前终端，可以指定已打开的文件对象 对文件是否追加更新由上下文的open()中的a/w参数指定 flush 可选 整成情况下输出是否被缓存（是否等待文件对象关闭前同一写入）由file对象决定，但如果指定为Ture则print()会强制立即将内容刷新进文件 一般用不到 </description>
      <content>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今天读代码的过程中发现了一种很有意思的print()写法&lt;/li&gt;
&lt;li&gt;每一个程序员对每一种语言最熟悉的不过于各种“hello world”，这也不可避免的造成了我们对最熟悉的print()语句最为“陌生”&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;主题&#34;&gt;主题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对于python中print()函数的参数深度使用方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语法&#34;&gt;语法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;print(*values, [sep=&amp;quot;&amp;quot;, end=&amp;quot;&amp;quot;, file=&amp;quot;&amp;quot;, flush=&amp;quot;&amp;quot;])&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参数&#34;&gt;参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;*values
&lt;ul&gt;
&lt;li&gt;必需&lt;/li&gt;
&lt;li&gt;要输出的内容，可以是任何类型对象&lt;/li&gt;
&lt;li&gt;同时输出多个对象时，需要用,隔开&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sep
&lt;ul&gt;
&lt;li&gt;可选&lt;/li&gt;
&lt;li&gt;同时输出多个对象时的分隔符&lt;/li&gt;
&lt;li&gt;默认空格&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;end
&lt;ul&gt;
&lt;li&gt;可选&lt;/li&gt;
&lt;li&gt;输出最后一个对象之后的结尾符&lt;/li&gt;
&lt;li&gt;默认是一个\n，即换行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;file
&lt;ul&gt;
&lt;li&gt;可选&lt;/li&gt;
&lt;li&gt;要打印输出到的“设备”&lt;/li&gt;
&lt;li&gt;默认为输出到当前终端，可以指定已打开的文件对象&lt;/li&gt;
&lt;li&gt;对文件是否追加更新由上下文的open()中的a/w参数指定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;flush
&lt;ul&gt;
&lt;li&gt;可选&lt;/li&gt;
&lt;li&gt;整成情况下输出是否被缓存（是否等待文件对象关闭前同一写入）由file对象决定，但如果指定为Ture则print()会强制立即将内容刷新进文件&lt;/li&gt;
&lt;li&gt;一般用不到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Pytorch使用单机多卡训练</title>
      <link>/posts/9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/9/</guid>
      <description>需求 对基于pytorch的深度学习模型进行多卡训练以加速训练过程 由于显卡版本过于老旧，安装配置NCCL工程量过于庞大，希望使用简单的pytorch代码实现单机多卡训练，不考虑多机多卡的显卡通信 训练完成后保存的checkpoint需要能够在任何设备上进行加载、推理 实现 训练 pytorch提供了简单的单机多卡训练api，只需要在初始化模型之后执行下列语句将模型复制到多卡上 # initiate multi-gpu training model = nn.DataParallel(model, device_ids=&amp;lt;ids of the gpus you want to use&amp;gt;) 其他操作与单卡训练完全一致 加载checkpoint 上述操作后保存的checkpoint如果按照常规方法直接进行加载会报错 RuntimeError: Error(s) in loading state_dict for &amp;lt;ModelName&amp;gt;: Missing key(s) in state_dict:... debug遍历后发现其实其状态字典是完全一致的，只是因为我们在训练过程中将模型定义为了多卡并行模型。这里只需要按照训练过程中转换为多卡模型的代码初始化当前模型结构即可，即执行： # initiate multi-gpu training model = nn.DataParallel(model, device_ids=&amp;lt;ids of the gpus you want to use&amp;gt;) 其他操作与征程推理完全一致，若不想使用多卡/只想使用cpu，只需要按照常规将device = torch.device(&amp;quot;&amp;lt;cpu/cuda:id&amp;gt;&amp;quot;)即可 Note：查阅资料过程中发现有解答建议使用参数强行忽略模型加载的错误torch.load(&amp;lt;checkpoint&amp;gt;, strict=False)，经测试，这样加载的模型啥也不是&amp;hellip;不知道为什么pytorch官方要提供这个接口</description>
      <content>&lt;h2 id=&#34;需求&#34;&gt;需求&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对基于pytorch的深度学习模型进行多卡训练以加速训练过程&lt;/li&gt;
&lt;li&gt;由于显卡版本过于老旧，安装配置NCCL工程量过于庞大，希望使用简单的pytorch代码实现单机多卡训练，不考虑多机多卡的显卡通信&lt;/li&gt;
&lt;li&gt;训练完成后保存的checkpoint需要能够在任何设备上进行加载、推理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;h3 id=&#34;训练&#34;&gt;训练&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pytorch提供了简单的单机多卡训练api，只需要在初始化模型之后执行下列语句将模型复制到多卡上&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# initiate multi-gpu training&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataParallel(model, device_ids&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;lt;&lt;/span&gt;ids of the gpus you want to use&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;其他操作与单卡训练完全一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;加载checkpoint&#34;&gt;加载checkpoint&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;上述操作后保存的checkpoint如果按照常规方法直接进行加载会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;RuntimeError&lt;/span&gt;: Error(s) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; loading state_dict &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ModelName&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Missing key(s) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; state_dict:&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;debug遍历后发现其实其状态字典是完全一致的，只是因为我们在训练过程中将模型定义为了多卡并行模型。这里只需要按照训练过程中转换为多卡模型的代码初始化当前模型结构即可，即执行：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# initiate multi-gpu training&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataParallel(model, device_ids&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;lt;&lt;/span&gt;ids of the gpus you want to use&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;其他操作与征程推理完全一致，若不想使用多卡/只想使用cpu，只需要按照常规将&lt;code&gt;device = torch.device(&amp;quot;&amp;lt;cpu/cuda:id&amp;gt;&amp;quot;)&lt;/code&gt;即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note：查阅资料过程中发现有解答建议使用参数强行忽略模型加载的错误&lt;code&gt;torch.load(&amp;lt;checkpoint&amp;gt;, strict=False)&lt;/code&gt;，经测试，这样加载的模型啥也不是&amp;hellip;不知道为什么pytorch官方要提供这个接口&lt;/strong&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Pytorch单机多卡(DP)训练之后的模型“货不对板”</title>
      <link>/posts/20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/20/</guid>
      <description>背景 之前介绍过Pytoch的单机多卡训练，当时采用的是内置的nn.DataParallel()方法 经过单机多卡训练的模型保存checkpoint之后再次加载需要同样使用DP()对模型进行封装之后才能正常加载，否则会报错状态词典的键值对不上 原因 经过DP()封装之后的模型，其状态词典分别添加了module.的前缀，例如原参数为hr_branch.conv_hr.1.layers.0.weight，封装之后变成了module.hr_branch.conv_hr.1.layers.0.weight。 解决方案 在加载状态词典之前将该前缀进行替换，得到纯净的状态词典，则不再需要重新对模型进行DP()封装 ckp_state_dict = torch.load(args.ckp, map_location=torch.device(&amp;#34;cpu&amp;#34;))[&amp;#34;model&amp;#34;] ckp_state = {} for k, v in ckp_state_dict.items(): k = k.replace(&amp;#34;module.&amp;#34;, &amp;#34;&amp;#34;) ckp_state[k] = v 参考 文章 </description>
      <content>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;之前介绍过Pytoch的&lt;a href=&#34;https://blog.sp.chaos.autos/archives/9/&#34;&gt;单机多卡训练&lt;/a&gt;，当时采用的是内置的&lt;code&gt;nn.DataParallel()&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;经过单机多卡训练的模型保存checkpoint之后再次加载需要同样使用&lt;code&gt;DP()&lt;/code&gt;对模型进行封装之后才能正常加载，否则会报错状态词典的键值对不上&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;经过&lt;code&gt;DP()&lt;/code&gt;封装之后的模型，其状态词典分别添加了&lt;code&gt;module.&lt;/code&gt;的前缀，例如原参数为&lt;code&gt;hr_branch.conv_hr.1.layers.0.weight&lt;/code&gt;，封装之后变成了&lt;code&gt;module.hr_branch.conv_hr.1.layers.0.weight&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在加载状态词典之前将该前缀进行替换，得到纯净的状态词典，则不再需要重新对模型进行&lt;code&gt;DP()&lt;/code&gt;封装&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ckp_state_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ckp, map_location&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;device(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cpu&amp;#34;&lt;/span&gt;))[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ckp_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ckp_state_dict&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;module.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ckp_state[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://szukevin.site/2021/02/27/MODNet%E8%BD%AC%E6%88%90torchscript%E5%BD%A2%E5%BC%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/&#34;&gt;文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Test</title>
      <link>/posts/24/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/24/</guid>
      <description>111</description>
      <content>&lt;p&gt;111&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Treafik反代保姆级急速上手</title>
      <link>/posts/14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/14/</guid>
      <description>需求场景 所有需要反代的场景 服务器上部署了太多的docker、frp映射等服务，每个服务都占用着各自的端口，多的以至于为了记忆这些服务端口我专门要维护一个记事本&amp;hellip; 什么是Treafik Traefik是一个开源的可以使得服务发布变得轻松有趣的 边缘路由器。它负责接收你系统的请求，然后使用合适的组件来对这些请求进行处理 Treafik可以自适应并动态自动发现你添加的所有服务、容器等等 Treafik适配了当前主流的所有服务技术（docker, k8s&amp;hellip;），这意味着你可以一次配置，终生动态，非常适合我这种懒人&amp;hellip; 正式使用 概念 这里用最直白的语言介绍traefik配置中的几个概念，对后边直接上手写配置有一定帮助，建议阅读
静态配置 Traefik初始启动时会读取的配置文件，该配置仅读取一次，后面更改需要重启服务 主要包括 全局配置项（Global） 日志配置项（Log） 入口点（Entrypoints） 安全证书（TLS） 提供者声明（Provider） 该文件对应docker中/etc/traefik/traefik.yaml 容器启动时Traefik会自动在/etc/traefik/目录下寻找traefik.toml/traefik.yaml/traefik.yml文件作为其静态配置 Traefik提供了共三种互斥的静态配置方式，另外两种请自行查阅文档 动态配置 基本等同于各个来源的Provider配置 主要需要编辑的是File Provider文件，该文件包含了所有的动态路由，Traefik会自动检测文件改动并动态发现、添加路由（Router）、服务（Service） 提供者/Providers 简而言之所谓的“提供者”就是告诉Traefik要去哪儿发现所有的路由规则及其对应的服务地址 该角色（Provider）的独立决定了Traefik天生即适应多入口、多平台的自动适应发现 本教程中将只会展示两种Provider的配置方式，其他更多的请查阅文档 入口点/EntryPoints 即Traefik对外暴露的端口，理想状态下也是整台服务器对外暴露的唯一端口 所有的网络请求通过该端口到达Traefik并由其接管后进行反代分流及负载均衡 可以开设多个入口点，一般为80+443 路由/Routers Traefik对外暴露的规则及其对内的具体服务路由规则 在这里定义Traefik所接受的域名、前缀、后缀、路径等等请求规则 在这里定义Traefik在接受到特定请求时该路由到的服务/Services 服务/Services 路由所要代理的具体服务地址 这里可以添加由Traefik管理的负载均衡，后面还可以添加亲和性等高阶使用，具体请查阅文档 开始/Let the Traefik Go 这里采用docker的方式启动，docker-compose以及手动部署等方式请自行查阅文档
Traefik主服务启动前 静态配置 静态配置需要在主服务启动之前完全确定下来并映射进容器/etc/traefik/中，主服务只会在启动、重启时读取一次，后续不再监控更改 文件名必须为traefik.yaml或traefik.tmol或traefik.yml 这里贴出我的配置，具体作用见配置项名或注释 ########################################### # # # Main Configuration File for Treafik # # By Chaos # # # ########################################### ## Global Config ## # --------------------------------------- # global: checkNewVersion: true sendAnonymousUsage: false # --------------------------------------- # ## Log Config ## # --------------------------------------- # log: # all the path is defined in the container # u need to map it outside filePath: &amp;#34;/etc/logs/run.</description>
      <content>&lt;h1 id=&#34;需求场景&#34;&gt;需求场景&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;所有需要反代的场景&lt;/li&gt;
&lt;li&gt;服务器上部署了太多的docker、frp映射等服务，每个服务都占用着各自的端口，多的以至于为了记忆这些服务端口我专门要维护一个记事本&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;什么是treafik&#34;&gt;什么是Treafik&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Traefik是一个开源的可以使得服务发布变得轻松有趣的 边缘路由器。它负责接收你系统的请求，然后使用合适的组件来对这些请求进行处理&lt;/li&gt;
&lt;li&gt;Treafik可以自适应并动态自动发现你添加的所有服务、容器等等&lt;/li&gt;
&lt;li&gt;Treafik适配了当前主流的所有服务技术（docker, k8s&amp;hellip;），这意味着你可以一次配置，终生动态，非常适合我这种懒人&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;正式使用&#34;&gt;正式使用&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这里用最直白的语言介绍traefik配置中的几个概念，对后边直接上手写配置有一定帮助，建议阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;静态配置&#34;&gt;静态配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Traefik初始启动时会读取的配置文件，该配置仅读取一次，后面更改需要重启服务&lt;/li&gt;
&lt;li&gt;主要包括
&lt;ul&gt;
&lt;li&gt;全局配置项（Global）&lt;/li&gt;
&lt;li&gt;日志配置项（Log）&lt;/li&gt;
&lt;li&gt;入口点（Entrypoints）&lt;/li&gt;
&lt;li&gt;安全证书（TLS）&lt;/li&gt;
&lt;li&gt;提供者声明（Provider）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;该文件对应docker中&lt;code&gt;/etc/traefik/traefik.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;容器启动时Traefik会自动在&lt;code&gt;/etc/traefik/&lt;/code&gt;目录下寻找&lt;code&gt;traefik.toml/traefik.yaml/traefik.yml&lt;/code&gt;文件作为其静态配置&lt;/li&gt;
&lt;li&gt;Traefik提供了共三种互斥的静态配置方式，另外两种请自行查阅&lt;a href=&#34;https://doc.traefik.io/traefik/&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;动态配置&#34;&gt;动态配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基本等同于各个来源的Provider配置&lt;/li&gt;
&lt;li&gt;主要需要编辑的是&lt;code&gt;File Provider&lt;/code&gt;文件，该文件包含了所有的动态路由，Traefik会自动检测文件改动并动态发现、添加路由（Router）、服务（Service）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;提供者providers&#34;&gt;提供者/Providers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;简而言之所谓的“提供者”就是告诉Traefik要去哪儿发现所有的路由规则及其对应的服务地址&lt;/li&gt;
&lt;li&gt;该角色（Provider）的独立决定了Traefik天生即适应多入口、多平台的自动适应发现&lt;/li&gt;
&lt;li&gt;本教程中将只会展示两种Provider的配置方式，其他更多的请查阅&lt;a href=&#34;https://doc.traefik.io/traefik/&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;入口点entrypoints&#34;&gt;入口点/EntryPoints&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;即Traefik对外暴露的端口，理想状态下也是整台服务器对外暴露的唯一端口&lt;/li&gt;
&lt;li&gt;所有的网络请求通过该端口到达Traefik并由其接管后进行反代分流及负载均衡&lt;/li&gt;
&lt;li&gt;可以开设多个入口点，一般为80+443&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;路由routers&#34;&gt;路由/Routers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Traefik对外暴露的规则及其对内的具体服务路由规则&lt;/li&gt;
&lt;li&gt;在这里定义Traefik所接受的域名、前缀、后缀、路径等等请求规则&lt;/li&gt;
&lt;li&gt;在这里定义Traefik在接受到特定请求时该路由到的服务/Services&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;服务services&#34;&gt;服务/Services&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;路由所要代理的具体服务地址&lt;/li&gt;
&lt;li&gt;这里可以添加由Traefik管理的负载均衡，后面还可以添加亲和性等高阶使用，具体请查阅&lt;a href=&#34;https://doc.traefik.io/traefik/&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;开始let-the-traefik-go&#34;&gt;开始/Let the Traefik Go&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这里采用docker的方式启动，docker-compose以及手动部署等方式请自行查阅文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;traefik主服务启动前&#34;&gt;Traefik主服务启动前&lt;/h3&gt;
&lt;h4 id=&#34;静态配置-1&#34;&gt;静态配置&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;静态配置需要在主服务启动之前完全确定下来并映射进容器&lt;code&gt;/etc/traefik/&lt;/code&gt;中，主服务只会在启动、重启时读取一次，后续不再监控更改&lt;/li&gt;
&lt;li&gt;文件名必须为&lt;code&gt;traefik.yaml&lt;/code&gt;或&lt;code&gt;traefik.tmol&lt;/code&gt;或&lt;code&gt;traefik.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;这里贴出我的配置，具体作用见配置项名或注释&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;###########################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                         #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Main Configuration File for Treafik     #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# By Chaos                                #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#                                         #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;###########################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Global Config ##&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;global&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;checkNewVersion&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;sendAnonymousUsage&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Log Config ##&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;log&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# all the path is defined in the container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# u need to map it outside&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;filePath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/logs/run.log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;level&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DEBUG&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;accesslog&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;filePath&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/logs/access.log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;bufferingSize&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Api Config ##&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 开启Traefik的控制看板&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;api&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;dashboard&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;insecure&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Entrypoints Config ##&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Definition&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;entryPoints&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;web&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# EntryPoint name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;address&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:80&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# EntryPoint address, must be string, not a integer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;web-secure&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;address&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;frps-control&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;address&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:446&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## TLS Config ##&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;certificatesResolvers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;sample&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 自定义名称，后边会用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;acme&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 固定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;life0531@foxmail.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;storage&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/acme.json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 证书存储位置，该文件需要事先创建并映射到宿主机，权限为600&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;httpChallenge&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 固定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;entryPoint&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;web&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# acme的入口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Provider Config ##&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Provider-1: File ##&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ‘文件’形式的提供者，该文件需要在启动前创建，为空与否不重要，后边会自动更新&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;providers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;file&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;filename&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/traefik/provider_file.yaml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 路径，容器内部&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;watch&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# auto find and update or not&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Provider-2: Docker ##&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# docker提供者，适配本机docker，自动发现新创建的容器并定义路由、服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;docker&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;network&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;traefik&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# traefik主服务所在的docker子网，建议提前创建好一个子网&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;exposedByDefault&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 是否默认监控所有新创建的容器，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;# 这里设置为false之后每次创建需要被反代的容器时需要添加一个特定label&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;创建docker子网&#34;&gt;创建docker子网&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;docker network create traefik-net&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;启动traefik主服务&#34;&gt;启动Traefik主服务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d -p 80:80 -p 443:443 -p 446:446 --name traefik &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-v &amp;lt;path_to_traefik.yaml_directory&amp;gt;:/etc/traefik/ &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-v &amp;lt;path_to_acme.json_file&amp;gt;:/etc/acme.json &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-v &amp;lt;path_to_all_the_logs_directory&amp;gt;:/etc/logs/ &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-v /var/run/docker.sock:/var/run/docker.sock &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--add-host host.docker.internal:host-gateway &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--network traefik-net &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;traefik:v2.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Note：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-v /var/run/docker.sock:/var/run/docker.sock&lt;/code&gt;为固定值，需要挂载让Traefik有权限监控docker的启动停止，这里会有一定安全问题，具体解决方案请自行折腾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--add-host host.docker.internal:host-gateway&lt;/code&gt;添加宿主机的本地host解析，否则容器内访问宿主机很棘手&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;编写file-provider&#34;&gt;编写File Provider&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;文件形式的提供者主要方便宿主机本机不以集群化工具启动的服务的反代、老旧服务的反代等等，灵活易改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;示例如下，见注释&lt;/li&gt;
&lt;li&gt;Traefik所有的配置语法均为&lt;code&gt;tmol&lt;/code&gt;或&lt;code&gt;yaml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Routers Config ##&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# http routers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;routers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;dashboard&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;rule&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;url rule&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# for more rules, access [here](https://www.qikqiak.com/traefik-book/routing/routers/#_2)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;service&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dashboard&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;middlewares&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;redirect-ssl&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;tls&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;certResolver&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sample&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# http services&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ldashboard&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;loadBalancer&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;servers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          - &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://127.0.0.1:8080&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;# use &amp;#39;http://host.docker.internal:port&amp;#39; if need to access he host&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# http middwares&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;middlewares&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;redirect-ssl&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;redirectScheme&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;scheme&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;permanent&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;tcp&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# http routers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;routers&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;frps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;entryPoints&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;frps-control&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;rule&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;tcp rules, details is available in  [here](https://www.qikqiak.com/traefik-book/routing/routers/#_8)&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;service&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;frps&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# tcp services&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;frps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;loadBalancer&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;servers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          - &lt;span style=&#34;color:#f92672&#34;&gt;address&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;reverse proxy&amp;#39;s target&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;terminationDelay&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# --------------------------------------- #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;该文件是动态监听更新的，放心大胆的改&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;traefik主服务启动的情况下启动需要被反代的docker容器&#34;&gt;Traefik主服务启动的情况下启动需要被反代的docker容器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;照例先贴模板&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;container_name&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--expose &amp;lt;ports which the container will use&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--network traefik-net &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-l &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traefik.enable=true&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-l &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traefik.http.routers.&amp;lt;container_name&amp;gt;.rule=&amp;lt;url rule&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-l &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traefik.http.routers.&amp;lt;container_name&amp;gt;.middlewares=redirect&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-l &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traefik.http.routers.&amp;lt;container_name&amp;gt;.tls=true&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-l &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traefik.http.routers.&amp;lt;container_name&amp;gt;.tls.certresolver=sample&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-l &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traefik.http.middlewares.redirect.redirectscheme.scheme=https&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-l &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;traefik.http.middlewares.redirect.redirectscheme.permanent=true&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&amp;lt;image_name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;命令详解
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-l &amp;quot;traefik.enable=true&amp;quot;&lt;/code&gt;：开启容器暴露，让Traefik帮我代理这个容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--expose &amp;lt;ports which the container will use&amp;gt;&lt;/code&gt;：在刚刚创建的子网中暴露端口，没啥作用，主要怕自己忘&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l &amp;quot;traefik.http.routers.&amp;lt;container_name&amp;gt;.rule=&amp;lt;url rule&amp;gt;&amp;quot;&lt;/code&gt;：声明反代规则，这里需要注意反斜杠问题，举个例子:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-l &amp;#34;traefik.http.routers.&amp;lt;container_name&amp;gt;.rule=Host(\`url.url\`)&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-l &amp;quot;traefik.http.routers.&amp;lt;container_name&amp;gt;.middlewares=redirect&amp;quot;&lt;/code&gt;：要使用的中间件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;马上结束了&#34;&gt;马上结束了！&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;此时访问刚刚定义的url规则，应该能看到Traefik的dashboard，一切正常！&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;后记&#34;&gt;后记&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Traefik给我这种不愿意记忆乱七八糟端口的懒人提供了非常方便简单的一键配置&lt;/li&gt;
&lt;li&gt;该文只是给想体验Traefik的同学一个快速、简单的上手路线，以最简单、我能理解的方式将Traefik的主要概念、配置项进行解释并给出示例&lt;/li&gt;
&lt;li&gt;由于本人水平有限，有些地方可能存在错误或者理解不到位，feel free to ask any questions!&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>windows下使用wsl2初体验</title>
      <link>/posts/3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/3/</guid>
      <description>背景 尝试全面转向win作为主力开发系统，但是很多东西需要在linux下执行，wsl经历了一次技术路线的全面更新在网络上的反响也还是不错的。随机决定进行一下尝试 几点说明 本篇文章仅仅是小白从零开始进行wsl2配置，没有过wsl1的使用经验，里边的步骤也大多都是来自于万能的互联网 本篇文章不涉及深度使用的感受，后续体验之后有时间的话会再进行记录 概念 wsl全名windows subsystem for linux 开始安装 安装WSL2功能模块 该步骤下所有命令执行都在windows powershell(管理员模式)下
打开wsl功能模块 dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 安装必要功能 dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 重启电脑，完成安装（重要，我被卡在这里很久） 设置内核安装默认为wsl2 powershell（管理员）执行wsl --set-default-version 2 这里正常的话是可以正常执行的，如果提示类似于需要升级wsl内核之类的信息的话，就需要手动更新一下wsl内核： 下载地址 下载完成双击打开一路下一步即可，无其他可选项 安装linux子系统 打开windows应用商店，搜索关键字linux 下载安装想要使用的linux发行版，等待安装完成 开始菜单启动一次刚刚安装的发行版，耐心等待安装完成 配置 以下配置以本人安装的Debain为例，步骤差不多，有一些命令可能会不一样
换源 用预设源进行apt-get update，切记不能先换源，否则会出现错误 安装必要软件apt-get install ca-certificates 备份原源列表cp /etc/apt/sources.list /etc/apt/sources.list.backup 编辑源列表nano /etc/apt/sources.list 将源列表内容替换为下列内容 deb [trusted=yes] https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free # deb-src [trusted=yes] https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free deb [trusted=yes] https://mirrors.</description>
      <content>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;尝试全面转向win作为主力开发系统，但是很多东西需要在linux下执行，wsl经历了一次技术路线的全面更新在网络上的反响也还是不错的。随机决定进行一下尝试&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;几点说明&#34;&gt;几点说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本篇文章仅仅是小白从零开始进行wsl2配置，没有过wsl1的使用经验，里边的步骤也大多都是来自于万能的互联网&lt;/li&gt;
&lt;li&gt;本篇文章不涉及深度使用的感受，后续体验之后有时间的话会再进行记录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;wsl全名windows subsystem for linux&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开始安装&#34;&gt;开始安装&lt;/h2&gt;
&lt;h3 id=&#34;安装wsl2功能模块&#34;&gt;安装WSL2功能模块&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;该步骤下所有命令执行都在windows powershell(管理员模式)下&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;打开wsl功能模块
&lt;code&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装必要功能
&lt;code&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启电脑，完成安装（&lt;strong&gt;重要，我被卡在这里很久&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;设置内核安装默认为wsl2&#34;&gt;设置内核安装默认为wsl2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;powershell（管理员）执行&lt;code&gt;wsl --set-default-version 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;这里正常的话是可以正常执行的，如果提示类似于&lt;!-- raw HTML omitted --&gt;需要升级wsl内核&lt;!-- raw HTML omitted --&gt;之类的信息的话，就需要手动更新一下wsl内核：
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package&#34;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载完成双击打开一路下一步即可，无其他可选项&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装linux子系统&#34;&gt;安装linux子系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;打开windows应用商店，搜索关键字&lt;code&gt;linux&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载安装想要使用的linux发行版，等待安装完成&lt;/li&gt;
&lt;li&gt;开始菜单启动一次刚刚安装的发行版，耐心等待安装完成&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;以下配置以本人安装的&lt;code&gt;Debain&lt;/code&gt;为例，步骤差不多，有一些命令可能会不一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;换源&#34;&gt;换源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用预设源进行&lt;code&gt;apt-get update&lt;/code&gt;，&lt;!-- raw HTML omitted --&gt;切记不能先换源，否则会出现错误&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;安装必要软件&lt;code&gt;apt-get install ca-certificates&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;备份原源列表&lt;code&gt;cp /etc/apt/sources.list /etc/apt/sources.list.backup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编辑源列表&lt;code&gt;nano /etc/apt/sources.list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将源列表内容替换为下列内容&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;deb [trusted=yes] https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free
# deb-src [trusted=yes] https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free
deb [trusted=yes] https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free
#deb-src [trusted=yes] https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free
deb [trusted=yes] https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free
# deb-src [trusted=yes] https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free
deb [trusted=yes] https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free
# deb-src [trusted=yes] https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;更新源列表&lt;code&gt;apt-get update&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代理上网&#34;&gt;代理上网&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;wsl2采用了虚拟化技术，对于宿主机来说wsl是一个单独的虚拟网卡，等同于一张“公共网卡”，所以对于wsl2来讲，win宿主机的ip地址是网卡内部的ip，需要通过命令&lt;code&gt;cat /etc/resolv.conf | grep nameserver | awk &#39;{ print $2 }&#39;&lt;/code&gt;进行查看，为了后文叙述方便，这里&lt;strong&gt;假设&lt;/strong&gt;输出结果&lt;code&gt;192.168.1.2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;方案一临时性全局科学仅对当前shell窗口生效&#34;&gt;方案一：临时性全局科学，仅对当前shell窗口生效&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;shell窗口直接执行&lt;code&gt;export ALL_PROXY=protocol://192.168.1.2:port&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;方案二软件解决每次需要科学的命令需要加上命令前缀&#34;&gt;方案二：软件解决，每次需要科学的命令需要加上命令前缀&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;安装&lt;code&gt;apt-get install proxychains&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置&lt;code&gt;nano /etc/proxychains.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在文件末尾根据示例添加科学地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;美化shell窗口&#34;&gt;美化shell窗口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;安装zsh: &lt;code&gt;apt-get install zsh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装oh-my-zsh: &lt;code&gt;sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置oh-my-zsh:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/console/releases&#34;&gt;下载&lt;/a&gt;最新版本对shell窗口进行优化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tonsky/FiraCode/master/distr/ttf/FiraCode-Retina.ttf&#34;&gt;下载&lt;/a&gt;字体并安装&lt;/li&gt;
&lt;li&gt;安装&lt;code&gt;zsh&lt;/code&gt;神级插件：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
  git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;编辑&lt;code&gt;nano ~/.zshrc&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;找到&lt;code&gt;ZSH_THEME&lt;/code&gt;修改为&lt;code&gt;agnoster&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找到&lt;code&gt;plugins&lt;/code&gt;并在后边添加想启用的插件，以空格为分隔符&lt;code&gt;git zsh-syntax-highlighting zsh-autosuggestions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;python环境&#34;&gt;Python环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;为了后期方便，这里采用conda对python环境进行统一管理&lt;/li&gt;
&lt;li&gt;由于wsl完全占用C盘空间，所以尽量选择最小安装，节省空间。Anaconda官方预算3G空间，Miniconda完全安装完大概1G左右，故选择miniconda进行安装&lt;/li&gt;
&lt;li&gt;步骤
&lt;ul&gt;
&lt;li&gt;定位到用户目录&lt;code&gt;cd ~&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh&#34;&gt;下载&lt;/a&gt;Miniconda(python3.8)安装脚本&lt;/li&gt;
&lt;li&gt;执行脚本，并根据脚本提示进行安装&lt;code&gt;bash Miniconda3-latest-Linux-x86_64.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装完成，关闭当前shell窗口并重新开启&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;python -V&lt;/code&gt;验证安装结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;写在最后&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;zsh的其他美化以及插件功能还有很多，读者可以自行进行调研使用&lt;/li&gt;
&lt;li&gt;至此wsl2内核的debian系统已经达到能用的状态&lt;/li&gt;
&lt;li&gt;在这之前作者也是一个坚定的win/linux双系统使用者，只是近来由于一些原因必须要迁移到win平台，才发现其实在微软这么多年的深耕之下，全球有太多的软件公司都为win做了太多的优化，无论从美观程度、易用程度、更新速度方面都远超linux平台下的软件。而现在win也在深耕wsl，更是给了win一个很大的机会，“在不重启的情况下使用两个系统”，听起来就很不错。在搜索资料的过程中偶然瞥到wsl2现在已经支持了GPU，这对深度学习工作者来讲更是一个天大的好消息，同时也发现wsl对于ntfs的io慢到令人发指，作者目前还没有感受到，只能是进行深度体验后再说。无论如何，系统融合对于开发者来讲都是一个天大的好事。&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>windows平台下配置Texlive&#43;Texstudio书写LaTex文本</title>
      <link>/posts/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/11/</guid>
      <description>概念 LaTex：LaTeX，是一种基于TeX的排版系统，由美国计算机科学家莱斯利·兰伯特在20世纪80年代初期开发，利用这种格式系统的处理，即使用户没有排版和程序设计的知识也可以充分发挥由TeX所提供的强大功能，不必一一亲自去设计或校对。类似于Markdown，LaTex是一种更强大的自排版标签语言，相对来讲，其学习曲线较陡峭一些。 TexLive：不同于Markdown编辑器自带编译功能，LaTex受限于更强大的排版引擎、更丰富的宏包支持，需要单独的编辑器、编译器搭配使用（这一点非常类似于编程语言，所以将LaTex理解为一种特殊的编程语言也是没有问题的）TexLive是全平台支持的一款编译器，其自带一个简单的编辑器但是通常不被人使用，对中文支持较好，宏包相对齐全。 TexStudio：使用QT开发的LaTex前端编辑器，支持调用系统已安装TexLive编译，启动速度快，功能all in one，ui相对较为美观，配置简单上手迅速。 不同配置搭配 TexLive + TexStudio TexLive + VSCode &amp;hellip; 需求 快速上手LaTex，满足学术论文书写需求 配置简单，功能相对齐全 解决方案 屡次尝试VSCode作为编辑器但是不料遇到各种奇奇怪怪的问题，随即放弃转而寻找一款专业编辑器
安装TexLive
Texlive全量安装大约需要7~6G的空间，其安装包需要4.1G空间，安装之前请保证空间足够
使用清华镜像源下载全量安装包，官方建议使用网络安装包但是众所周知我们的网络状况经常会出状况&amp;hellip; win下直接点击下载好的iso挂载虚拟光驱 右键install-tl-windows.bat使用管理员身份运行，等待安装GUI加载完成 点击Customize按照下图所示进行配置 点击确定，安装；等待20~60分钟不等，向导会将编译器所需要的依赖、宏包全量安装，过程中不需要联网 安装TexStudio
下载安装包 根据安装向导一路下一步即可 Note:
后面有时间的话会再多进行几次尝试，看下到底哪个编译、编辑器组合比较好，后续再进行记录 对于基本的LaTex的文章语法，值得单独开一篇文章进行记录 </description>
      <content>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LaTex：LaTeX，是一种基于TeX的排版系统，由美国计算机科学家莱斯利·兰伯特在20世纪80年代初期开发，利用这种格式系统的处理，即使用户没有排版和程序设计的知识也可以充分发挥由TeX所提供的强大功能，不必一一亲自去设计或校对。类似于Markdown，LaTex是一种更强大的自排版标签语言，相对来讲，其学习曲线较陡峭一些。&lt;/li&gt;
&lt;li&gt;TexLive：不同于Markdown编辑器自带编译功能，LaTex受限于更强大的排版引擎、更丰富的宏包支持，需要单独的编辑器、编译器搭配使用（这一点非常类似于编程语言，所以将LaTex理解为一种特殊的编程语言也是没有问题的）TexLive是全平台支持的一款编译器，其自带一个简单的编辑器但是通常不被人使用，对中文支持较好，宏包相对齐全。&lt;/li&gt;
&lt;li&gt;TexStudio：使用QT开发的LaTex前端编辑器，支持调用系统已安装TexLive编译，启动速度快，功能all in one，ui相对较为美观，配置简单上手迅速。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;不同配置搭配&#34;&gt;不同配置搭配&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TexLive + TexStudio&lt;/li&gt;
&lt;li&gt;TexLive + VSCode
&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;需求&#34;&gt;需求&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;快速上手LaTex，满足学术论文书写需求&lt;/li&gt;
&lt;li&gt;配置简单，功能相对齐全&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;屡次尝试VSCode作为编辑器但是不料遇到各种奇奇怪怪的问题，随即放弃转而寻找一款专业编辑器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装TexLive&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Texlive全量安装大约需要7~6G的空间，其安装包需要4.1G空间，安装之前请保证空间足够&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;使用清华镜像源&lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2021.iso&#34;&gt;下载&lt;/a&gt;全量安装包，官方建议使用网络安装包但是众所周知我们的网络状况经常会出状况&amp;hellip;&lt;/li&gt;
&lt;li&gt;win下直接点击下载好的iso挂载虚拟光驱&lt;/li&gt;
&lt;li&gt;右键&lt;code&gt;install-tl-windows.bat&lt;/code&gt;使用管理员身份运行，等待安装GUI加载完成&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/616537362ab3f51d91d90885.jpg&#34; alt=&#34;点击高级设置&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/616538212ab3f51d91da3f4c.jpg&#34; alt=&#34;进行安装设置&#34;&gt;&lt;/li&gt;
&lt;li&gt;点击Customize按照下图所示进行配置&lt;img src=&#34;https://pic.imgdb.cn/item/616538cd2ab3f51d91db355f.jpg&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;点击确定，安装；等待20~60分钟不等，向导会将编译器所需要的依赖、宏包全量安装，过程中不需要联网&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装TexStudio&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/texstudio-org/texstudio/releases/download/4.0.1/texstudio-4.0.1-win-qt5.exe&#34;&gt;下载&lt;/a&gt;安装包&lt;/li&gt;
&lt;li&gt;根据安装向导一路下一步即可&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;后面有时间的话会再多进行几次尝试，看下到底哪个编译、编辑器组合比较好，后续再进行记录&lt;/li&gt;
&lt;li&gt;对于基本的LaTex的文章语法，值得单独开一篇文章进行记录&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>不同Linux发行版添加新用户并设置权限</title>
      <link>/posts/8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/8/</guid>
      <description>背景 由于一些需求，需要给服务器添加一个新用户并设置sudo权限 之前从未进行过该方面的学习，找到一个非常详细的博文，故记录一下 该随笔会保持更新，收录多种发行版下对用户账号的操作 Ubuntu 18.04 添加新用户 sudo useradd -r -m -s &amp;lt;新用户要使用的shell&amp;gt; &amp;lt;新用户名&amp;gt;
参数解析 -r 建立系统账号 -m 自动建立用户的登入目录/home/&amp;lt;user_name&amp;gt; -s 指定用户登入后使用的shell 设置密码 ubuntu新创建的用户不会自动提示设置密码
sudo passwd &amp;lt;user_name&amp;gt;
设置用户权限 使用修改/etc/sudoers文件的方式将新用户加入sudo列表
默认/etc/sudoers不可编辑，首先修改权限chmod +w /etc/sudoers 增加新用户 sudo nano /etc/sudoers # 适当位置添加 &amp;lt;uer_name&amp;gt; ALL=(ALL:ALL) ALL 保存生效 删除用户 执行删除命令sudo userdel &amp;lt;user_name&amp;gt; 删除用户目录sudo rm -rf /home/&amp;lt;user_name&amp;gt; 移除/etc/sudoers中关于&amp;lt;user_name&amp;gt;的权限设置，否则无法创建新的同名用户 参考 Ubuntu创建新用户的正确姿势 Debian 10.2 创建用户 sudo adduser &amp;lt;user_name&amp;gt; 执行完上述命令后，系统会提示设置该用户的密码、个人信息等 授权用户sudo 使用修改/etc/sudoers文件的方式将该用户加入sudo组以授权超级权限
授权sudoers文件可编辑sudo chmod +w /etc/sudoers 增加新用户 sudo nano /etc/sudoers # 适当位置添加 &amp;lt;uer_name&amp;gt; ALL=(ALL:ALL) ALL 保存生效 删除用户 deluser --remove-home &amp;lt;user_name&amp;gt;</description>
      <content>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由于一些需求，需要给服务器添加一个新用户并设置sudo权限&lt;/li&gt;
&lt;li&gt;之前从未进行过该方面的学习，找到一个非常详细的博文，故记录一下&lt;/li&gt;
&lt;li&gt;该随笔会保持更新，收录多种发行版下对用户账号的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ubuntu-1804&#34;&gt;Ubuntu 18.04&lt;/h2&gt;
&lt;h3 id=&#34;添加新用户&#34;&gt;添加新用户&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo useradd -r -m -s &amp;lt;新用户要使用的shell&amp;gt; &amp;lt;新用户名&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;参数解析&#34;&gt;参数解析&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-r 建立系统账号
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-m 自动建立用户的登入目录/home/&amp;lt;user_name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-s 指定用户登入后使用的shell
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;设置密码&#34;&gt;设置密码&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ubuntu新创建的用户不会自动提示设置密码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;sudo passwd &amp;lt;user_name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;设置用户权限&#34;&gt;设置用户权限&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;使用修改&lt;code&gt;/etc/sudoers&lt;/code&gt;文件的方式将新用户加入sudo列表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;默认&lt;code&gt;/etc/sudoers&lt;/code&gt;不可编辑，首先修改权限&lt;code&gt;chmod +w /etc/sudoers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;增加新用户&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nano /etc/sudoers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 适当位置添加&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;uer_name&amp;gt; ALL&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;ALL:ALL&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ALL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;保存生效&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;删除用户&#34;&gt;删除用户&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;执行删除命令&lt;code&gt;sudo userdel &amp;lt;user_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除用户目录&lt;code&gt;sudo rm -rf /home/&amp;lt;user_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;移除&lt;code&gt;/etc/sudoers&lt;/code&gt;中关于&amp;lt;user_name&amp;gt;的权限设置，否则无法创建新的同名用户&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/1e4afd31958c&#34;&gt;Ubuntu创建新用户的正确姿势&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;debian-102&#34;&gt;Debian 10.2&lt;/h2&gt;
&lt;h3 id=&#34;创建用户&#34;&gt;创建用户&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo adduser &amp;lt;user_name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;执行完上述命令后，系统会提示设置该用户的密码、个人信息等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;授权用户sudo&#34;&gt;授权用户sudo&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;使用修改&lt;code&gt;/etc/sudoers&lt;/code&gt;文件的方式将该用户加入sudo组以授权超级权限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;授权sudoers文件可编辑&lt;code&gt;sudo chmod +w /etc/sudoers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;增加新用户&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nano /etc/sudoers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 适当位置添加&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;uer_name&amp;gt; ALL&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;ALL:ALL&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ALL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;保存生效&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;删除用户-1&#34;&gt;删除用户&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;deluser --remove-home &amp;lt;user_name&amp;gt;&lt;/code&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>不同发行版安装NVIDIA-container-runtime</title>
      <link>/posts/21/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/21/</guid>
      <description>背景 NVIDIA-container-runtime是在docker容器中映射本机显卡必备的运行时 NVIDIA推出该工具之后搭配新版本的docker就不需要使用单独版本的docker启动支持显卡的容器 开始动手 添加安装源 官网比较难进，酌情查看
Debian-based distributions Debian/Ubuntu/&amp;hellip;
curl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey | \ sudo apt-key add - distribution=$(. /etc/os-release;echo $ID$VERSION_ID) curl -s -L https://nvidia.github.io/nvidia-container-runtime/$distribution/nvidia-container-runtime.list | \ sudo tee /etc/apt/sources.list.d/nvidia-container-runtime.list sudo apt-get update RHEL-based distributions CentOS/Fedora/Oracle/&amp;hellip;
distribution=$(. /etc/os-release;echo $ID$VERSION_ID) curl -s -L https://nvidia.github.io/nvidia-container-runtime/$distribution/nvidia-container-runtime.repo | \ sudo tee /etc/yum.repos.d/nvidia-container-runtime.repo 更新密钥 安装源来自于nvidia官网，可能会有些慢
Debian-based distributions curl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey | \ sudo apt-key add - RHEL-based distributions DIST=$(sed -n &amp;#39;s/releasever=//p&amp;#39; /etc/yum.conf) DIST=${DIST:-$(. /etc/os-release; echo $VERSION_ID)} sudo rpm -e gpg-pubkey-f796ecb0 sudo gpg --homedir /var/lib/yum/repos/$(uname -m)/$DIST/nvidia-container-runtime/gpgdir --delete-key f796ecb0 安装 安装源来自于nvidia官网，可能会有些慢</description>
      <content>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NVIDIA-container-runtime&lt;/strong&gt;是在docker容器中映射本机显卡必备的运行时&lt;/li&gt;
&lt;li&gt;NVIDIA推出该工具之后搭配新版本的docker就不需要使用单独版本的docker启动支持显卡的容器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开始动手&#34;&gt;开始动手&lt;/h2&gt;
&lt;h3 id=&#34;添加安装源&#34;&gt;添加安装源&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://nvidia.github.io/nvidia-container-runtime/&#34;&gt;官网&lt;/a&gt;比较难进，酌情查看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;debian-based-distributions&#34;&gt;Debian-based distributions&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Debian/Ubuntu/&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey | &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  sudo apt-key add -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;distribution&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;. /etc/os-release;echo $ID$VERSION_ID&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -s -L https://nvidia.github.io/nvidia-container-runtime/$distribution/nvidia-container-runtime.list | &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  sudo tee /etc/apt/sources.list.d/nvidia-container-runtime.list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;rhel-based-distributions&#34;&gt;RHEL-based distributions&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;CentOS/Fedora/Oracle/&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;distribution&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;. /etc/os-release;echo $ID$VERSION_ID&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -s -L https://nvidia.github.io/nvidia-container-runtime/$distribution/nvidia-container-runtime.repo | &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  sudo tee /etc/yum.repos.d/nvidia-container-runtime.repo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;更新密钥&#34;&gt;更新密钥&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;安装源来自于nvidia官网，可能会有些慢&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;debian-based-distributions-1&#34;&gt;Debian-based distributions&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey | &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  sudo apt-key add -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;rhel-based-distributions-1&#34;&gt;RHEL-based distributions&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DIST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;sed -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/releasever=//p&amp;#39;&lt;/span&gt; /etc/yum.conf&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DIST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;DIST&lt;span style=&#34;color:#66d9ef&#34;&gt;:-$(&lt;/span&gt;. /etc/os-release; echo $VERSION_ID&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo rpm -e gpg-pubkey-f796ecb0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo gpg --homedir /var/lib/yum/repos/&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;uname -m&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/$DIST/nvidia-container-runtime/gpgdir --delete-key f796ecb0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;安装源来自于nvidia官网，可能会有些慢&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;debian-based-distributions-2&#34;&gt;Debian-based distributions&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install nvidia-container-runtime
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;rhel-based-distributions-2&#34;&gt;RHEL-based distributions&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo yum install nvidia-container-runtime
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA/nvidia-container-runtime&#34;&gt;NVIDIA container runtime repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nvidia.github.io/nvidia-container-runtime/&#34;&gt;NVIDIA container runtime distributions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>使用Anyproxy搭配frp搭建校园网回校代理</title>
      <link>/posts/10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/10/</guid>
      <description>搭建回校代理，方便在外访问学校服务器 需求 由于学校vpn仅限教职工与博士使用，同时校园网仅限一台pc设备同时在线，所以有时需要笔记本连接热点的情况下连接实验室内部的服务器就显得非常蠢笨以及困难。 目前已经搭建了校园网内台式机的rdp外网连接，但是在不稳定的网络状况下，rdp有时候心有余而力不足，同时更多的需求只是需要进行内网的ssh连接，使用rdp未免有些大材小用 实现工具 Anyproxy 阿里开源的一款开箱即用的代理服务 带有web监控页面 支持http/https代理 依赖于nodejs，方便安装 支持生成CA证书认证 Frp go语言的一款开箱即用内网穿透 支持插件，方便后期进行拓展 支持单服务端多客户端 全平台对称，方便跨平台使用 实现方案 安装Nodejs 官网下载nodejs的安装包 按照你默认设置进行安装 Note: 中途会提示是否安装choco，在本次教程中可以将勾选取消，目前我们用不到
使用npm安装anyproxy 启动cmd/powershell任意命令行窗口 npm install anyproxy -g 命令行窗口直接执行anyproxy --port &amp;lt;port_u_want_to_use_as_proxy&amp;gt; ==Note:==上述测试可能会出现command not found的问题，需要手动将命令行定位到&amp;lt;node_install_path&amp;gt;/node_global/node_mudoles/下
在网内机器上安装配置frpc 在Release页面下载合适的系统版本并解压 使用记事本编辑frpc.ini，替换为下列内容 [common] server_addr = &amp;lt;ur_frps_address&amp;gt; server_port = &amp;lt;ur_frps_port&amp;gt; [anyproxy-interface] local_ip = 127.0.0.1 local_port = 8002 remote_port = 8002 [anyproxy-http] local_ip = 127.0.0.1 local_port = &amp;lt;port_u_want_to_use_as_proxy&amp;gt; remote_port = &amp;lt;port_u_want_to_use_as_proxy&amp;gt; 启动测试frpc.exe -c frpc.ini 在具备公网ip的机器上安装frps 下载同上 使用合适的文本编辑工具编辑frps.ini，替换为下列内容 [common] bind_port = &amp;lt;ur_frps_port&amp;gt; 启动测试frps -c frps.</description>
      <content>&lt;h1 id=&#34;搭建回校代理方便在外访问学校服务器&#34;&gt;搭建回校代理，方便在外访问学校服务器&lt;/h1&gt;
&lt;h2 id=&#34;需求&#34;&gt;需求&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由于学校vpn仅限教职工与博士使用，同时校园网仅限一台pc设备同时在线，所以有时需要笔记本连接热点的情况下连接实验室内部的服务器就显得非常蠢笨以及困难。&lt;/li&gt;
&lt;li&gt;目前已经搭建了校园网内台式机的rdp外网连接，但是在不稳定的网络状况下，rdp有时候心有余而力不足，同时更多的需求只是需要进行内网的ssh连接，使用rdp未免有些大材小用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现工具&#34;&gt;实现工具&lt;/h2&gt;
&lt;h3 id=&#34;anyproxy&#34;&gt;Anyproxy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;阿里开源的一款开箱即用的代理服务&lt;/li&gt;
&lt;li&gt;带有web监控页面&lt;/li&gt;
&lt;li&gt;支持http/https代理&lt;/li&gt;
&lt;li&gt;依赖于nodejs，方便安装&lt;/li&gt;
&lt;li&gt;支持生成CA证书认证&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;frp&#34;&gt;Frp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;go语言的一款开箱即用内网穿透&lt;/li&gt;
&lt;li&gt;支持插件，方便后期进行拓展&lt;/li&gt;
&lt;li&gt;支持单服务端多客户端&lt;/li&gt;
&lt;li&gt;全平台对称，方便跨平台使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现方案&#34;&gt;实现方案&lt;/h2&gt;
&lt;h3 id=&#34;安装nodejs&#34;&gt;安装Nodejs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/zh-cn/download/&#34;&gt;官网&lt;/a&gt;下载nodejs的安装包&lt;/li&gt;
&lt;li&gt;按照你默认设置进行安装&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: 中途会提示是否安装choco，在本次教程中可以将勾选取消，目前我们用不到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;使用npm安装anyproxy&#34;&gt;使用npm安装anyproxy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;启动cmd/powershell任意命令行窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install anyproxy -g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;命令行窗口直接执行&lt;code&gt;anyproxy --port &amp;lt;port_u_want_to_use_as_proxy&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;==Note:==上述测试可能会出现&lt;code&gt;command not found&lt;/code&gt;的问题，需要手动将命令行定位到&lt;code&gt;&amp;lt;node_install_path&amp;gt;/node_global/node_mudoles/&lt;/code&gt;下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;在网内机器上安装配置frpc&#34;&gt;在网内机器上安装配置frpc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;a href=&#34;https://github.com/fatedier/frp/releases&#34;&gt;Release&lt;/a&gt;页面下载合适的系统版本并解压&lt;/li&gt;
&lt;li&gt;使用记事本编辑&lt;code&gt;frpc.ini&lt;/code&gt;，替换为下列内容&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[common]
server_addr = &amp;lt;ur_frps_address&amp;gt;
server_port = &amp;lt;ur_frps_port&amp;gt;

[anyproxy-interface]
local_ip = 127.0.0.1
local_port = 8002
remote_port = 8002

[anyproxy-http]
local_ip = 127.0.0.1
local_port = &amp;lt;port_u_want_to_use_as_proxy&amp;gt;
remote_port = &amp;lt;port_u_want_to_use_as_proxy&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;启动测试&lt;code&gt;frpc.exe -c frpc.ini&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;在具备公网ip的机器上安装frps&#34;&gt;在具备公网ip的机器上安装frps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下载同上&lt;/li&gt;
&lt;li&gt;使用合适的文本编辑工具编辑&lt;code&gt;frps.ini&lt;/code&gt;，替换为下列内容&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[common]
bind_port = &amp;lt;ur_frps_port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;启动测试&lt;code&gt;frps -c frps.ini&lt;/code&gt;/&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: 这里如果客户机与服务器配置没错的话，应该已经能够看到log输出两台机器已经互联&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;h3 id=&#34;全局系统代理&#34;&gt;全局系统代理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;设置 -&amp;gt; 网络 &amp;amp; Internet -&amp;gt; 代理 -&amp;gt; 手动设置代理 -&amp;gt; 填写frps地址与端口&lt;/li&gt;
&lt;li&gt;此时走系统代理的服务应该已经可以访问网内地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ssh内网地址&#34;&gt;ssh内网地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;无论什么平台，其默认命令行窗口是不走系统代理而是走更底层协议的&lt;/li&gt;
&lt;li&gt;ssh命令提供了新的代理接口&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1OMPGmG8cj5mmvjsO_AX0orPcI-h944D5/view?usp=sharing&#34;&gt;下载&lt;/a&gt;工具&lt;/li&gt;
&lt;li&gt;将其放在系统任何路径下，将路径添加到Path环境变量里&lt;/li&gt;
&lt;li&gt;再次执行ssh连接时添加参数&lt;code&gt;ssh -p &amp;lt;port&amp;gt; &amp;lt;user&amp;gt;@&amp;lt;addr&amp;gt; -o &amp;quot;ProxyCommand connect -H &amp;lt;frps_address&amp;gt;:&amp;lt;port_u_want_to_use_as_proxy&amp;gt; %p %h&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;浏览器代理&#34;&gt;浏览器代理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;推荐使用SwitchyOmega&lt;/li&gt;
&lt;li&gt;在配置中新建代理，设置对应代理地址、端口&lt;/li&gt;
&lt;li&gt;在访问校内网页时走代理即可&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>使用Docker将python应用打包为images</title>
      <link>/posts/4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/4/</guid>
      <description>需求描述 正常运行的sanic应用需要进行服务器迁移，首先想到的当然是通过docker 基本步骤 编写dockerfile 这里非必须在应用根目录下进行dockerfile的建立及编写，但是为了后续方便，强烈建议
在应用根目录新建Dockerfile文件 touch Dockerfile 内容 # 基础镜像，这里选用python3.8 FROM python:3.8 # 维护者（非必需） MAINTAINER &amp;lt;your_name&amp;gt; &amp;lt;your_email&amp;gt; # 指定工作目录 WORKDIR / # 将应用所需文件拷贝到容器中 COPY . / # 安装必要的python三方库，建议提前生成一个依赖库列表，为了后续的构建方便 # 这里推荐使用pipreqs三方库生成，这样能够最小化使用到的库数量 RUN pip install -r requirements.txt -i https://pypi.doubanio.com/simple # 暴露容器端口 EXPOSE &amp;lt;port_used&amp;gt;/tcp # 执行docker run会执行的命令，按照空格进行分割 CMD [&amp;#34;python&amp;#34;, &amp;#34;/run.py&amp;#34;] 构建docker镜像 docker build -t &amp;lt;image_name&amp;gt; &amp;lt;Dockerfile_path&amp;gt; // 这里需要强调的是 &amp;lt;Dockerfile_path&amp;gt; 一定需要是一个目录，而不是dockerfile本身 其他 将镜像打包为tar文件，方便迁移 docker save -o &amp;lt;file_name.tar&amp;gt; &amp;lt;image_name&amp;gt; 将迁移的tar文件导入为镜像 docker load --input &amp;lt;file_name.tar&amp;gt; </description>
      <content>&lt;h2 id=&#34;需求描述&#34;&gt;需求描述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;正常运行的sanic应用需要进行服务器迁移，首先想到的当然是通过docker&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本步骤&#34;&gt;基本步骤&lt;/h2&gt;
&lt;h3 id=&#34;编写dockerfile&#34;&gt;编写dockerfile&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这里非必须在应用根目录下进行dockerfile的建立及编写，但是为了后续方便，强烈建议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在应用根目录新建Dockerfile文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;touch Dockerfile
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;内容&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 基础镜像，这里选用python3.8
FROM python:3.8

# 维护者（非必需）
MAINTAINER &amp;lt;your_name&amp;gt; &amp;lt;your_email&amp;gt;

# 指定工作目录
WORKDIR /
# 将应用所需文件拷贝到容器中
COPY . /

# 安装必要的python三方库，建议提前生成一个依赖库列表，为了后续的构建方便
# 这里推荐使用pipreqs三方库生成，这样能够最小化使用到的库数量
RUN pip install -r requirements.txt -i https://pypi.doubanio.com/simple

# 暴露容器端口
EXPOSE &amp;lt;port_used&amp;gt;/tcp

# 执行docker run会执行的命令，按照空格进行分割
CMD [&amp;#34;python&amp;#34;, &amp;#34;/run.py&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;构建docker镜像&#34;&gt;构建docker镜像&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker build -t &amp;lt;image_name&amp;gt; &amp;lt;Dockerfile_path&amp;gt;
// 这里需要强调的是 &amp;lt;Dockerfile_path&amp;gt; 一定需要是一个目录，而不是dockerfile本身
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;h3 id=&#34;将镜像打包为tar文件方便迁移&#34;&gt;将镜像打包为tar文件，方便迁移&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker save -o &amp;lt;file_name.tar&amp;gt; &amp;lt;image_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;将迁移的tar文件导入为镜像&#34;&gt;将迁移的tar文件导入为镜像&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker load --input &amp;lt;file_name.tar&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>使用wireguard&amp;amp;wg-easy快速实现异地组网</title>
      <link>/posts/17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/17/</guid>
      <description>背景 WireGuard：是一个现代化的基于Linux内核态运行的高效、优雅的跨平台VPN实现方案；底层协议采用UDP进行数据传输 wg-easy：是一个使用Vue+wireguard开发的快速启动、管理、监控wg服务的docker镜像 需求： 异地组网：n台互相在异地的机器相互组成一个局域网并各自拥有自己在该虚拟内网中的独立ip地址，实现无障碍安全互访 无公网ip：这里不做标题党，具体的网络拓扑是： 1台具备公网ip的服务器 n-1台不具备公网ip并且藏在无数层NAT之后的机器 解决方案 总体思路 使用具备公网ip的服务器作为wg服务端，所有在vpn内的机器直接通过该设备进行流量转发 wg-easy启动在公网ip服务器，并统一通过面板为客户机下发配置文件 其他设备直接本机安装wg作为客户端 启动服务端（具备公网ip的机器） 这里采用docker-compose的方式进行启动，由于wg-easy具备一个漂亮的管理面板，故使用traefik对其进行管理
建立启动配置文件 version: &amp;#34;3.8&amp;#34; services: wg-easy: environment: # ⚠️ Required: # Change this to your host&amp;#39;s public address - WG_HOST=&amp;lt;ur host domain&amp;gt; # - WG_DEFAULT_DNS=192.168.2.1 - WG_ALLOWED_IPS=&amp;lt;set default ACL in the clients&amp;gt; # Optional: - PASSWORD=&amp;lt;web ui&amp;#39;s password&amp;gt; # - WG_PORT=51820 - WG_DEFAULT_ADDRESS=10.8.0.x # - WG_MTU=1420 image: weejewel/wg-easy container_name: wg_easy volumes: - &amp;lt;path_to_host&amp;gt;:/etc/wireguard # ports: # - &amp;#34;51820:51820/udp&amp;#34; # control port(main) # - &amp;#34;51821:51821/tcp&amp;#34; # web ui port network_mode: &amp;#34;host&amp;#34; # ⚠️Required restart: unless-stopped cap_add: - NET_ADMIN - SYS_MODULE labels: - traefik.</description>
      <content>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WireGuard：是一个现代化的基于Linux内核态运行的高效、优雅的跨平台VPN实现方案；底层协议采用UDP进行数据传输&lt;/li&gt;
&lt;li&gt;wg-easy：是一个使用Vue+wireguard开发的快速启动、管理、监控wg服务的docker镜像&lt;/li&gt;
&lt;li&gt;需求：
&lt;ul&gt;
&lt;li&gt;异地组网：n台互相在异地的机器相互组成一个局域网并各自拥有自己在该虚拟内网中的独立ip地址，实现无障碍安全互访&lt;/li&gt;
&lt;li&gt;无公网ip：这里不做标题党，具体的网络拓扑是：
&lt;ul&gt;
&lt;li&gt;1台具备公网ip的服务器&lt;/li&gt;
&lt;li&gt;n-1台不具备公网ip并且藏在无数层NAT之后的机器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;h3 id=&#34;总体思路&#34;&gt;总体思路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用具备公网ip的服务器作为wg服务端，所有在vpn内的机器直接通过该设备进行流量转发&lt;/li&gt;
&lt;li&gt;wg-easy启动在公网ip服务器，并统一通过面板为客户机下发配置文件&lt;/li&gt;
&lt;li&gt;其他设备直接本机安装wg作为客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;启动服务端具备公网ip的机器&#34;&gt;启动服务端（具备公网ip的机器）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这里采用&lt;code&gt;docker-compose&lt;/code&gt;的方式进行启动，由于wg-easy具备一个漂亮的管理面板，故使用&lt;code&gt;traefik&lt;/code&gt;对其进行管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;建立启动配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3.8&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;wg-easy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# ⚠️ Required:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Change this to your host&amp;#39;s public address&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;WG_HOST=&amp;lt;ur host domain&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# - WG_DEFAULT_DNS=192.168.2.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;WG_ALLOWED_IPS=&amp;lt;set default ACL in the clients&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# Optional:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;PASSWORD=&amp;lt;web ui&amp;#39;s password&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# - WG_PORT=51820&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;WG_DEFAULT_ADDRESS=10.8.0.x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# - WG_MTU=1420&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;weejewel/wg-easy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;container_name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;wg_easy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;path_to_host&amp;gt;:/etc/wireguard&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# ports:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# - &amp;#34;51820:51820/udp&amp;#34; # control port(main)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;# - &amp;#34;51821:51821/tcp&amp;#34; # web ui port&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;network_mode&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# ⚠️Required&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;restart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;unless-stopped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;cap_add&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;NET_ADMIN&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;SYS_MODULE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;traefik.enable=true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;traefik.http.routers.wg_easy.rule=Host(`&amp;lt;url rule for traefik&amp;gt;`)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;traefik.http.routers.wg_easy.middlewares=redirect&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;traefik.http.routers.wg_easy.tls=true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;traefik.http.routers.wg_easy.tls.certresolver=sample&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;traefik.http.middlewares.redirect.redirectscheme.scheme=https&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;traefik.http.middlewares.redirect.redirectscheme.permanent=true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;traefik.http.services.wg_easy.loadbalancer.server.port=51821&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;启动wg-easy：&lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看log可以使用：&lt;code&gt;docker-compose logs -f wg_easy&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Note：由于wg运行在linux内核态，故其强依赖于5.x.x的linux内核。强烈建议首先检查&lt;code&gt;uname -r&lt;/code&gt;是否为&lt;!-- raw HTML omitted --&gt;5.x.x&lt;!-- raw HTML omitted --&gt;，否则需要进行一个&lt;a href=&#34;https://blog.dov.moe/posts/32240/&#34;&gt;内核升级&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动成功后访问&lt;code&gt;host:5000&lt;/code&gt;，输入密码进入wg服务端后台管理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;建立子网客户机下发客户端配置文件&#34;&gt;建立子网客户机，下发客户端配置文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;进入后台后点击&lt;!-- raw HTML omitted --&gt;+NEW&lt;!-- raw HTML omitted --&gt;添加新客户机&lt;/li&gt;
&lt;li&gt;输入完成后点击下载，获取客户机的配置文件，留待备用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;客户端安装wireguard不具备公网ip的机器&#34;&gt;客户端安装wireguard（不具备公网ip的机器）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;wg支持全平台，可以在&lt;a href=&#34;https://blog.dov.moe/posts/32240/&#34;&gt;官网&lt;/a&gt;找到全平台的安装方式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;同样的，该处如果为linux，则强依赖与目标机内核版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;windows直接添加配置文件之后启动即可，回到服务端后台可以看到两台设备已经建立连接并具备各自的独立ip，&lt;strong&gt;服务机ip默认为x.x.x.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对于linux
&lt;ul&gt;
&lt;li&gt;需要将刚刚下载的配置文件放置在&lt;code&gt;/etc/wireguard&lt;/code&gt;下，重命名为你想要使用的虚拟网卡名&lt;/li&gt;
&lt;li&gt;wg(linux)给出两种优雅的启动方式：
&lt;ul&gt;
&lt;li&gt;systemd（推荐，可以配置开机自启）：&lt;code&gt;systemctl start wg-quick@配置文件名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;wg-quick：&lt;code&gt;wg-quick up 配置文件名&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;回到服务端后台，可以看到两台设备已经建立连接并具备各自的独立ip，&lt;strong&gt;服务机ip默认为x.x.x.1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;踩坑指南&#34;&gt;踩坑指南&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;目前发现的一个问题，如果在服务机上开启了ufw，即便是放通了wg的主配置端口也会存在子网设备无法互访的问题，暂未排查出问题，解决方案即是关闭ufw；初步推断是wg在进行内网打洞/转发的时候使用了不同的端口（此时服务端相当于一个网关设备），但是被ufw全数阻挡了&lt;/li&gt;
&lt;li&gt;有调研发现大陆境内的udp被运营商限速&lt;/li&gt;
&lt;li&gt;当服务机是墙外机器（即流量需要过墙）时，有几率会被识别，因为不同于frp等内网穿透工具，wg具有明显且易用的xx上网特征&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>使用zerotier-one搭配anyproxy保障多种方式回内网</title>
      <link>/posts/15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/15/</guid>
      <description>背景 之前写过怎么在win平台使用frp搭配zerotierone搭建回校内网，详见这里 但是pc经常会出现关机等等意外情况，同时frp一定需要一台公网服务器，受限于国内带宽的高价，有时候该种解决方案并不是最优 本次介绍一种使用zerotier-one的官方服务进行内网组建同时搭配anyproxy的vpn方法 刚好趁此机会介绍一下在linux下的anyproxy的安装配置 产品简介 anyproxy 跨平台基于nodejs的快速http代理工具，不多介绍 zerotier-one 一款全平台的vpn子网组件工具 该工具会自动在转发、直通、p2p等方式中选择最优方案进行子网组建 官方提供转发服务器，虽然是在境外（速度相对较慢）但是聊胜于无，免费账号可以同时加入100台机器（甚至对于一个小团队都是够用的），不限制子网数量 动手吧！ 安装anyproxy 首先确保有npm工具： npm -v 直接进行一个安装 sudo npm install anyproxy -g 启动测试 anyproxy --port &amp;lt;proxy port u wanna use&amp;gt; 配置开机启动 防止机器断电，还是配置一下开机自启比较好 为了方便（其实是我只会这一种），这里使用systemd的方式配置开机自启 具体systemd是什么请自行google，这里只需要知道该守护程序有两个可以放置配置文件的地方：/etc/systemd/system/或者/usr/lib/systemd/system/ 创建服务文件 sudo touch /usr/lib/systemd/system/anyproxy.service 编写服务文件(复制记得删除注释) [Unit] Description=Initiate the anyproxy server # 给出一个详细描述 After=network-online.target # 固定 [Service] Type=simple # 固定 ExecStart=/bin/bash &amp;lt;abspath_to_init.sh&amp;gt; # 需要将anyproxy的启动写成一个sh脚本，并放在任意位置，chmod给执行权限 Restart=on-abort # 固定 User=root # 固定 [Install] # 固定 WantedBy=default.target # 固定 重载 sudo systemctl daemon-reload 启动 sudo systemctl start anyproxy 查看运行状态 sudo systemclt status anyproxy 设置开机自启 sudo systemctl enable anyproxy 安装配置zerotier-one 下载 这里下载并安装 注册并创建一个子网 这里使用你喜欢的方式注册登录zerotier 点击Create A Network，稍等片刻点击进入创建好的子网 起一个喜欢的名字，其他保持默认即可 记下来最上边的Network ID，这个后边会用 加入网络 Linux 执行下列命令加入刚刚创建的子网 sudo zerotier-cli join &amp;lt;Network ID&amp;gt; 稍等片刻，回到网页后台会发现在Members区域出现了刚刚加入的机器，但是zerotier默认新加入的机器没有任何ip分配权限，需要点击最前边Auth?</description>
      <content>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;之前写过怎么在win平台使用&lt;!-- raw HTML omitted --&gt;frp&lt;!-- raw HTML omitted --&gt;搭配&lt;!-- raw HTML omitted --&gt;zerotierone&lt;!-- raw HTML omitted --&gt;搭建回校内网，详见&lt;a href=&#34;https://blog.hk.chaoss.top/archives/10/&#34;&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;但是pc经常会出现关机等等意外情况，同时frp一定需要一台公网服务器，受限于国内带宽的高价，有时候该种解决方案并不是最优&lt;/li&gt;
&lt;li&gt;本次介绍一种使用&lt;!-- raw HTML omitted --&gt;zerotier-one&lt;!-- raw HTML omitted --&gt;的官方服务进行内网组建同时搭配anyproxy的vpn方法&lt;/li&gt;
&lt;li&gt;刚好趁此机会介绍一下在linux下的anyproxy的安装配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;产品简介&#34;&gt;产品简介&lt;/h1&gt;
&lt;h2 id=&#34;anyproxy&#34;&gt;anyproxy&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;跨平台基于nodejs的快速http代理工具，不多介绍&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;zerotier-one&#34;&gt;zerotier-one&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一款全平台的vpn子网组件工具&lt;/li&gt;
&lt;li&gt;该工具会自动在&lt;!-- raw HTML omitted --&gt;转发、直通、p2p&lt;!-- raw HTML omitted --&gt;等方式中选择最优方案进行子网组建&lt;/li&gt;
&lt;li&gt;官方提供转发服务器，虽然是在境外（速度相对较慢）但是聊胜于无，免费账号可以同时加入100台机器（甚至对于一个小团队都是够用的），不限制子网数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;动手吧&#34;&gt;动手吧！&lt;/h1&gt;
&lt;h2 id=&#34;安装anyproxy&#34;&gt;安装anyproxy&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;首先确保有npm工具：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm -v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;直接进行一个安装&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo npm install anyproxy -g
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;启动测试&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;anyproxy --port &amp;lt;proxy port u wanna use&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;配置开机启动&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;防止机器断电，还是配置一下开机自启比较好&lt;/li&gt;
&lt;li&gt;为了方便（其实是我只会这一种），这里使用systemd的方式配置开机自启&lt;/li&gt;
&lt;li&gt;具体systemd是什么请自行google，这里只需要知道该守护程序有两个可以放置配置文件的地方：&lt;code&gt;/etc/systemd/system/&lt;/code&gt;或者&lt;code&gt;/usr/lib/systemd/system/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;创建服务文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo touch /usr/lib/systemd/system/anyproxy.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;编写服务文件&lt;!-- raw HTML omitted --&gt;(复制记得删除注释)&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Unit&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Initiate the anyproxy server &lt;span style=&#34;color:#75715e&#34;&gt;# 给出一个详细描述&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;After&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;network-online.target &lt;span style=&#34;color:#75715e&#34;&gt;# 固定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Service&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;simple &lt;span style=&#34;color:#75715e&#34;&gt;# 固定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ExecStart&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/bin/bash &amp;lt;abspath_to_init.sh&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 需要将anyproxy的启动写成一个sh脚本，并放在任意位置，chmod给执行权限&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Restart&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;on-abort &lt;span style=&#34;color:#75715e&#34;&gt;# 固定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;root &lt;span style=&#34;color:#75715e&#34;&gt;# 固定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Install&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 固定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WantedBy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;default.target &lt;span style=&#34;color:#75715e&#34;&gt;# 固定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;重载&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl daemon-reload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;启动&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl start anyproxy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;查看运行状态&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemclt status anyproxy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;设置开机自启&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl enable anyproxy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;安装配置zerotier-one&#34;&gt;安装配置zerotier-one&lt;/h2&gt;
&lt;h3 id=&#34;下载&#34;&gt;下载&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zerotier.com/download/&#34;&gt;这里&lt;/a&gt;下载并安装&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注册并创建一个子网&#34;&gt;注册并创建一个子网&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://my.zerotier.com/&#34;&gt;这里&lt;/a&gt;使用你喜欢的方式注册登录zerotier&lt;/li&gt;
&lt;li&gt;点击&lt;code&gt;Create A Network&lt;/code&gt;，稍等片刻点击进入创建好的子网&lt;/li&gt;
&lt;li&gt;起一个喜欢的名字，其他保持默认即可&lt;/li&gt;
&lt;li&gt;记下来最上边的&lt;code&gt;Network ID&lt;/code&gt;，这个后边会用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;加入网络&#34;&gt;加入网络&lt;/h3&gt;
&lt;h4 id=&#34;linux&#34;&gt;Linux&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;执行下列命令加入刚刚创建的子网&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo zerotier-cli join &amp;lt;Network ID&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;稍等片刻，回到网页后台会发现在&lt;code&gt;Members&lt;/code&gt;区域出现了刚刚加入的机器，但是zerotier默认新加入的机器没有任何ip分配权限，需要点击最前边&lt;code&gt;Auth?&lt;/code&gt;对应的小框框，打上勾勾，稍等片刻便发现刚刚的机器被分配了一个自己的ip地址
&lt;img src=&#34;https://pic.imgdb.cn/item/61cdc9b12ab3f51d91faad8d.jpg&#34; alt=&#34;授权&#34;&gt;&lt;/li&gt;
&lt;li&gt;你可以给机器起一个方便记忆的名字，此时所有加入了这个子网的机器都可以使用子网内的ip进行互相通信，我们不需要关心其背后的实现逻辑到底是直通还是官方中转&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;windows&#34;&gt;Windows&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;安装完成后会自动启动并最小化到托盘&lt;/li&gt;
&lt;li&gt;点击右键并打开控制面板
&lt;img src=&#34;https://pic.imgdb.cn/item/61cdc9f92ab3f51d91fae7ff.jpg&#34; alt=&#34;打开控制面板&#34;&gt;&lt;/li&gt;
&lt;li&gt;键入&lt;code&gt;Network ID&lt;/code&gt;并点击加入
&lt;img src=&#34;https://pic.imgdb.cn/item/61cdc9732ab3f51d91fa6703.jpg&#34; alt=&#34;加入网络&#34;&gt;&lt;/li&gt;
&lt;li&gt;回到网页后台重复上述授权&lt;/li&gt;
&lt;li&gt;恭喜你，此时你手上的机器与刚才启动anyproxy的机器已经在同一个内网了，你可以使用服务器在内网中的ip地址加上刚刚设置的anyproxy端口进行代理访问了；当然你也可以直接使用内网ip对服务器进行ssh连接，将该机器作为跳板机连接任何与该机器同网内的设备&lt;/li&gt;
&lt;li&gt;zerotier-one在安装时如果使用的是官方的安装脚本的话其默认是开机自启的，不需要我们再重新配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;后记&#34;&gt;后记&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;这里介绍了新的两种内网组建方式&lt;/li&gt;
&lt;li&gt;其实这几种方式排列组合能够产生很多好玩的用法，子网的方式能够更安全的对外暴露ssh等敏感服务，理论上讲只有zerotier官方能够看到服务器的真实ip（该ip还不是机器的，是机器所在最高网关的），此时能够完全放心的ssh连接，否则的话使用公网ip暴露ssh端口会有很多很多陌生人跨越山和大海来扫你&amp;hellip;&lt;/li&gt;
&lt;li&gt;本人水平有限，仍在努力学习，难免存在行文不畅、过于简单、存在错误等等问题，希望大家多多指正！&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>关于python协程销毁、超时</title>
      <link>/posts/2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/2/</guid>
      <description>概念 协程 通过async/await语法进行声明，是书写python异步应用的推荐方式 可等待对象 如果一个对象可以在await中使用，那么它就是可等待/awaitable对象 类型：协程、任务、Future async.sleep(delay, result=None, *, loop=None) 阻塞delay指定的秒数 sleep()总是为挂起当前任务，以允许其他任务运行 场景 Sanic后台任务执行失败被挂起，不报错，影响后续任务的进行 解决方案 对后台任务中可能出现失败的协程增设超时 asyncio.wait_for(aw,, timeout, *, loop=None) 等待aw可等待对象完成，指定timeout秒数后超时取消 timeout可以为None，也可以为float/int数值表示的等待秒数。如果timeout为None，则等待直到协程返回 如果发生超时，任务将取消并引发asyncio.TimeoutError 要避免任务取消，可以加上shield() 简单等待 asyncio.wait(aws, *, loop=None, return_when=ALL_CONPLETED) 并发地运行aws可迭代对象中的可等待对象并进入阻塞状态直到满足return_when所执行的条件 aws可迭代对象必须不为空 此函数不会引发asyncio.TimeoutError，当超时发生时，未完成的Future/Task将在指定秒数后返回；与wait_for()不同，wait()在超时后不会取消可等待对象 </description>
      <content>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;h3 id=&#34;协程&#34;&gt;协程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过async/await语法进行声明，是书写python异步应用的推荐方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可等待对象&#34;&gt;可等待对象&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果一个对象可以在await中使用，那么它就是可等待/awaitable对象
&lt;ul&gt;
&lt;li&gt;类型：协程、任务、Future&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;asyncsleepdelay-resultnone--loopnone&#34;&gt;async.sleep(delay, result=None, *, loop=None)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;阻塞delay指定的秒数&lt;/li&gt;
&lt;li&gt;sleep()总是为挂起当前任务，以允许其他任务运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sanic后台任务执行失败被挂起，不报错，影响后续任务的进行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;h3 id=&#34;对后台任务中可能出现失败的协程增设font-colorred超时font&#34;&gt;对后台任务中可能出现失败的协程增设&lt;!-- raw HTML omitted --&gt;超时&lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;asyncio.wait_for(aw,, timeout, *, loop=None)
&lt;ul&gt;
&lt;li&gt;等待aw可等待对象完成，指定timeout&lt;strong&gt;秒&lt;/strong&gt;数后超时取消&lt;/li&gt;
&lt;li&gt;timeout可以为None，也可以为float/int数值表示的等待秒数。如果timeout为None，则等待直到协程返回&lt;/li&gt;
&lt;li&gt;如果发生超时，任务将取消并引发asyncio.TimeoutError&lt;/li&gt;
&lt;li&gt;要避免任务取消，可以加上shield()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简单等待&#34;&gt;简单等待&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;asyncio.wait(aws, *, loop=None, return_when=ALL_CONPLETED)
&lt;ul&gt;
&lt;li&gt;并发地运行aws可迭代对象中的可等待对象并进入阻塞状态直到满足return_when所执行的条件&lt;/li&gt;
&lt;li&gt;aws可迭代对象必须不为空&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;此函数不会引发asyncio.TimeoutError，当超时发生时，未完成的Future/Task将在指定秒数后返回；与&lt;code&gt;wait_for()&lt;/code&gt;不同，&lt;code&gt;wait()&lt;/code&gt;在超时后不会取消可等待对象&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>深度学习中的预训练与自训练</title>
      <link>/posts/5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/5/</guid>
      <description>几个概念 预训练 自训练 自监督学习 半监督学习 监督学习 无监督学习 区分 预训练 广义上讲：是对一个模型进行“预先训练”，以完成后续的下游任务 狭义上讲（更常用）：在大规模无标注语料上，用自监督的方式训练模型 自训练 常应用于CV领域 有一个Teacher模型$M_{teacher}$和一个Student模型$M_{student}$，首先在标注数据上训练$M_{teacher}$，然后用它对大规模无标注数据进行标注，把得到的结果(与少量有标签数据混合)当做伪标注数据去训练$M_{student}$ 使用少量的标记数据和大量的未标记数据对模型进行联合训练 预训练与自训练是同级概念，其中分别可以与“监督/半监督/无监督/自监督”进行组合 监督与无监督 无监督的典型任务是聚类算法 半监督 没有太多意义的一个概念 其中的代表即自训练，甚至基本等同 自监督 是狭义上“预训练”的实现方法 与完全不受监督的设置相比，自监督学习使用数据集本身的信息来构造伪标签 是一种具有监督形式的特殊形式的非监督学习方法 </description>
      <content>&lt;h3 id=&#34;几个概念&#34;&gt;几个概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;预训练&lt;/li&gt;
&lt;li&gt;自训练&lt;/li&gt;
&lt;li&gt;自监督学习&lt;/li&gt;
&lt;li&gt;半监督学习&lt;/li&gt;
&lt;li&gt;监督学习&lt;/li&gt;
&lt;li&gt;无监督学习&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;区分&#34;&gt;区分&lt;/h3&gt;
&lt;h4 id=&#34;预训练&#34;&gt;预训练&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;广义上讲：是对一个模型进行“预先训练”，以完成后续的下游任务&lt;/li&gt;
&lt;li&gt;狭义上讲（更常用）：在大规模无标注语料上，用自监督的方式训练模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;自训练&#34;&gt;自训练&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;常应用于CV领域&lt;/li&gt;
&lt;li&gt;有一个Teacher模型$M_{teacher}$和一个Student模型$M_{student}$，首先在标注数据上训练$M_{teacher}$，然后用它对大规模无标注数据进行标注，把得到的结果(与少量有标签数据混合)当做伪标注数据去训练$M_{student}$&lt;/li&gt;
&lt;li&gt;使用少量的标记数据和大量的未标记数据对模型进行联合训练
&lt;strong&gt;预训练与自训练是同级概念，其中分别可以与“监督/半监督/无监督/自监督”进行组合&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;监督与无监督&#34;&gt;监督与无监督&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;无监督的典型任务是&lt;strong&gt;聚类算法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;半监督&#34;&gt;半监督&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;没有太多意义的一个概念&lt;/li&gt;
&lt;li&gt;其中的代表即自训练，甚至基本等同&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;自监督&#34;&gt;自监督&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;是狭义上“预训练”的实现方法&lt;/li&gt;
&lt;li&gt;与完全不受监督的设置相比，自监督学习使用数据集本身的信息来构造伪标签&lt;/li&gt;
&lt;li&gt;是一种具有监督形式的特殊形式的非监督学习方法&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>深度神经网络中seed函数</title>
      <link>/posts/7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/7/</guid>
      <description>背景 在阅读代码过程中经常发现以下几种代码，尤其常见于pytorch书写的深度神经网络代码中 torch.manual_seed(seed) torch.cuda.manual_seed(seed) np.random.seed(seed) torch.cuda.manual_seed_all() 正文 经查询资料得出结论，该代码作用即为将模型在初始化过程中所用到的“随机数”全部固定下来，以保证每次重新训练模型需要初始化模型参数的时候能够得到相同的初始化参数，从而达到稳定复现训练结果的目的 参考资料 https://www.zhihu.com/question/288350769 https://cloud.tencent.com/developer/article/1149041 </description>
      <content>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在阅读代码过程中经常发现以下几种代码，尤其常见于&lt;code&gt;pytorch&lt;/code&gt;书写的深度神经网络代码中&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;manual_seed(seed)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cuda&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;manual_seed(seed)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;seed(seed)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cuda&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;manual_seed_all()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;经查询资料得出结论，该代码作用即为将模型在初始化过程中所用到的“随机数”全部固定下来，以保证每次重新训练模型需要初始化模型参数的时候能够得到相同的初始化参数，从而达到稳定复现训练结果的目的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/288350769&#34;&gt;https://www.zhihu.com/question/288350769&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1149041&#34;&gt;https://cloud.tencent.com/developer/article/1149041&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>简单的shell脚本搭配Crontab实现linux定时备份设定文件(夹)</title>
      <link>/posts/18/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/18/</guid>
      <description>场景 自用linux系统装在一块不是太稳定的硬盘里，很多服务启动脚本、docker容器脚本需要定期备份到另一块硬盘上 硬连接不适用于文件夹、跨盘连接 软链接在源文件丢失、挂掉的情况下会失效 解决方案 使用简单的一个shell脚本向目标位置复制需要备份的文件（夹） crontab是linux提供的定时任务，搭配上述脚本实现每xx时间自动执行shell脚本 脚本 services=( \ &amp;#34;path/to/some/file/or/folder&amp;#34; \ &amp;#34;path/to/another/file/or/folder&amp;#34; \ ) destination=&amp;#34;/path/to/destination/folder/&amp;#34; for elem in ${services[@]} do echo &amp;#34;# Backuping $elem&amp;#34; cp -r $elem $destination done echo &amp;#34;--------------------------------&amp;#34; date echo &amp;#34;- All backup task completed! -&amp;#34; echo &amp;#34;--------------------------------&amp;#34; echo &amp;#34;--------------------------------&amp;#34; echo -e &amp;#34;\n\n&amp;#34; 设置定时任务 打开定时任务编辑 crontab -e 添加任务 # backup all of my services at 3:50 every day 50 3 * * * bash /path/to/backup_services.sh &amp;gt;&amp;gt; /path/to/backup.</description>
      <content>&lt;h1 id=&#34;场景&#34;&gt;场景&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;自用linux系统装在一块不是太稳定的硬盘里，很多服务启动脚本、docker容器脚本需要定期备份到另一块硬盘上&lt;/li&gt;
&lt;li&gt;硬连接不适用于文件夹、跨盘连接&lt;/li&gt;
&lt;li&gt;软链接在源文件丢失、挂掉的情况下会失效&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;解决方案&#34;&gt;解决方案&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;使用简单的一个shell脚本向目标位置复制需要备份的文件（夹）&lt;/li&gt;
&lt;li&gt;crontab是linux提供的定时任务，搭配上述脚本实现每xx时间自动执行shell脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;脚本&#34;&gt;脚本&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; services&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path/to/some/file/or/folder&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path/to/another/file/or/folder&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;destination&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/destination/folder/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; elem in &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;services[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;# Backuping &lt;/span&gt;$elem&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cp -r $elem $destination
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--------------------------------&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;date
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;- All backup task completed! -&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--------------------------------&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--------------------------------&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;设置定时任务&#34;&gt;设置定时任务&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;打开定时任务编辑 &lt;code&gt;crontab -e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加任务&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# backup all of my services at 3:50 every day&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; * * * bash /path/to/backup_services.sh &amp;gt;&amp;gt; /path/to/backup.logs 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;保存查看&lt;code&gt;crontab -l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
